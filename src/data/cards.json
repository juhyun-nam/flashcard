{
  "data": [
    {
      "subject": "OOD principle",
      "contents": [
        {
          "front": "단일 책임 원칙(SRP)",
          "back": "한 클래스는 단 한가지의 변경 이유만을 가져야 한다."
        },
        {
          "front": "개방-폐쇄 원칙(OCP)",
          "back": "소프트웨어 개체(클래스, 모듈, 함수 등)는 확장에 대해 열려 있어야 하고, 수정에 대해서는 닫혀 있어야 한다."
        },
        {
          "front": "리스코프 치환 원칙(LSP)",
          "back": "서브타입은 그것의 기반 타입으로 치환 가능해야 한다. (프로그램 객체는 프로그램의 정확성을 깨뜨리지 않으면 서 하위 타입의 인스턴스로 바꿀 수 있어야 한다."
        },
        {
          "front": "인터페이스 분리 원칙(ISP)",
          "back": "클라이언트가 자신이 사용하지 않는 메소드에 의존하도록 강제해서는 안 된다."
        },
        {
          "front": "의존관계 역전 원칙(DIP)",
          "back": "상위 수준의 모듈은 하위 수준의 모듈에 의존해서는 안 된다. 둘 모두 추상화에 의존해야 한다. 추상화는 구체적인 사항에 의존해서는 안 된다. 구체적인 사항은 추상화에 의존해야 한다."
        }
      ]
    },
    {
      "subject": "Design Patterns",
      "contents": [
        {
          "front": "Abstract Factory",
          "back": [
            "Creational Patterns.",
            "구체적인 클래스를 지정하지 않고 관련성을 같는 객체들의 집합을 생성하거나 서로 독집적인 객체들의 집합을 생성할 수 있는 인터페이스를 제공하는 패턴"
          ]
        },
        {
          "front": "Builder",
          "back": [
            "Creational Patterns.",
            "복합 객체의 생성 과정과 표현 방법을 분리하여 동일한 생성 절차에서 서로 다른 표현 결과를 만들 수 있게 하는 패턴"
          ]
        },
        {
          "front": "Factory Method",
          "back": [
            "Creational Patterns.",
            "객체를 생성하는 인터페이스는 미리 정의하되, 인스턴스를 만들 클래스의 결정은 서브 클래스 쪽에서 내리는 패턴입니다. 팩토리 메서드 패턴에서는 클래스의 인스턴스를 만드는 시점을 서브클래스로 미룹니다. "
          ]
        },
        {
          "front": "Prototype",
          "back": [
            "Creational Patterns.",
            "생성할 객체의 종류를 명세하는 데에 원형이 되는 예시물을 이용하고, 그 원형을 복사함으로써 새로운 객체를 생성하는 패턴"
          ]
        },
        {
          "front": "Singleton",
          "back": [
            "Creational Patterns.",
            "어떤 클래스의 인스턴스는 오직 하나임을 보장하며, 이 인스턴스에 접근할 수 있는 전역적인 접촉점을 제공하는 패턴"
          ]
        },
        {
          "front": "Adaptor",
          "back": [
            "Structural Patterns.",
            "클래스의 인터페이스를 사용자가 기대하는 다른 인터페이스로 변환하는 패턴으로, 호환성이 없는 인터페이스 때문에 함께 동작할 수 없는 클래스들이 함께 작동하도록 해 줍니다."
          ]
        },
        {
          "front": "Bridge",
          "back": [
            "Structural Patterns.",
            "구현부에서 추상층을 분리하여 각자 독립적으로 변형할 수 있게 하는 패턴입니다."
          ]
        },
        {
          "front": "Composite",
          "back": [
            "Structural Patterns.",
            "객체들의 관계를 트리 구조로 구성하여 부분-전체 계층을 표현하는 패턴으로, 사용자가 단일 객체와 복합 객체 모두 동일하게 다루도록 합니다."
          ]
        },
        {
          "front": "Decorator",
          "back": [
            "Structural Patterns.",
            "주어진 상황 및 용도에 따라 어떤 객체에 책임을 덧붙이는 패턴으로, 기능 확장이 필요할 때 서브클래싱 대신 쓸 수 있는 유연한 대안이 될 수 있습니다."
          ]
        },
        {
          "front": "Facade",
          "back": [
            "Structural Patterns.",
            "서브시스템에 있는 인터페이스 집합에 대해서 하나의 통합된 인터페이스를 제공하는 패턴으로, 서브시스템을 좀더 사용하기 편하게 만드는 상위 수준의 인터페이스를 정의합니다."
          ]
        },
        {
          "front": "Flyweight",
          "back": [
            "Structural Patterns.",
            "크기가 작은 객체가 여러 개 있을 때, 공유를 통해 이들을 효율적으로 지원하는 패턴입니다."
          ]
        },
        {
          "front": "Proxy",
          "back": [
            "Structural Patterns.",
            "어떤 다른 객체로 접근하는 것을 통제하기 위해서 그 객체의 대리자(surrogate) 또는 자리채움자(placeholder)를 제공하는 패턴입니다."
          ]
        },
        {
          "front": "Chain of Responsibility",
          "back": [
            "Behavioral Patterns.",
            "요청을 처리할 수 있는 시회를 하나 이상의 객체에게 부여하여 요청을 보내는 객체와 그 요청을 받는 객체 사이의 결합을 피하는 패턴입니다. 요청을 받을 수 있는 객체를 연쇄적으로 묶고, 실제 요청을 처리할 객체를 만날 때까지 객체 고리를 따라서 요청을 전달합니다."
          ]
        },
        {
          "front": "Command",
          "back": [
            "Behavioral Patterns.",
            "요청을 객체의 형채로 캡슐화하여 서로 요청이 다른 사용자의 매개변수화, 요청 저장 또는 로깅, 그리고 연산의 취소를 지원하게 만드는 패턴입니다."
          ]
        },
        {
          "front": "Interpreter",
          "back": [
            "Behavioral Patterns.",
            "주어진 언어에 대해, 그 언어의 문법을 위한 표현 수단을 정의하고, 이와 아울러 그 표현 수단을 사용하여 해당 언어로 작성된 문장을 해석하는 해석기를 정의하는 패턴입니다."
          ]
        },
        {
          "front": "Iterator",
          "back": [
            "Behavioral Patterns.",
            "내부 표현부를 노출하지 않고 어떤 객체 집합에 속한 원소들을 순차적으로 접근할 수 있는 방법을 제공하는 패턴입니다."
          ]
        },
        {
          "front": "Mediator",
          "back": [
            "Behavioral Patterns.",
            "한 집합에 속해있는 객체들의 상호작용을 캡슐화하는 객체를 정의하는 패턴입니다. 객체들이 직접 서로를 참조하지 않도록 함으로써 객체들 사이의 소결합(loost coupling)을 촉진시키며, 개발자가 객체들의 상호작용을 독립적으로 다양화시킬 수 있게 만듭니다."
          ]
        },
        {
          "front": "Memento",
          "back": [
            "Behavioral Patterns.",
            "캡슐화를 위배하지 않은 채로 어떤 객체의 내부 상태를 잡아 내고 실체화시켜, 이후에 해당 객체가 그 상태로 되돌아올 수 있도록 하는 패턴입니다."
          ]
        },
        {
          "front": "Observer",
          "back": [
            "Behavioral Patterns.",
            "객체들 사이에 일 대 다의 의존 관계를 정의해 두어, 어떤 객체의 상태가 변할 때 그 객체의 의존성을 가진 다른 객체들이 그 변화를 통지받고 자동으로 갱신될 수 있게 만드는 패턴입니다."
          ]
        },
        {
          "front": "State",
          "back": [
            "Behavioral Patterns.",
            "객체의 내부 상태에 따라 스스로 행동을 변경할 수 있게끔 허가하는 패턴으로, 이렇게 하면 객체는 마치 자신의 클래스를 바꾸는 것처럼 보입니다."
          ]
        },
        {
          "front": "Strategy",
          "back": [
            "Behavioral Patterns.",
            "동일 계열의 알고리즘군을 정의하고, 각각의 알고리즘을 캡슐화하며, 이들을 상호 교환이 가능하도록 만드는 패턴입니다. 알고리즘을 사용하는 사용자와 상관없이 독립적으로 알고리즘을 다양하게 변경할 수 있게 합니다."
          ]
        },
        {
          "front": "Template Method",
          "back": [
            "Behavioral Patterns.",
            "객체의 연산에는 알고리즘의 뼈대만을 정의하고 각 단계에서 수행할 구체적 처리는 서브클래스 쪽으로 미루는 패턴입니다. 알고리즘의 구조 자체는 그대로 놔둔 채 알고리즘 각 단계의 처리를 서브클래스에서 재정의할 수 있게 합니다."
          ]
        },
        {
          "front": "Visitor",
          "back": [
            "Behavioral Patterns.",
            "객체 구조를 이루는 원소에 대해 수행할 연산을 표현하는 패턴으로, 연산을 적용할 원소의 클래스를 변경하지 않고도 새로운 연산을 정의할 수 있게 합니다."
          ]
        }
      ]
    },
    {
      "subject": "lang",
      "contents": [
        {
          "front": "UCHAR_MAX",
          "back": "255"
        },
        {
          "front": "USHRT_MAX",
          "back": "65535"
        },
        {
          "front": "UINT_MAX",
          "back": "4294967295"
        }
      ]
    },
    {
      "subject": "linux features",
      "contents": [
        {
          "front": "C-a / C-e",
          "back": "beginning/end-of-line"
        },
        {
          "front": "C-f / C-b",
          "back": "forward/backward-char"
        },
        {
          "front": "M-f / M-b",
          "back": "forward/backword-word"
        },
        {
          "front": "C-l",
          "back": "clear-screen"
        },
        {
          "front": "C-p / C-n",
          "back": "previous/next-history"
        },
        {
          "front": "C-r",
          "back": "reverse-search-history"
        },
        {
          "front": "C-d",
          "back": "delete-char"
        },
        {
          "front": "C-h",
          "back": "backward-delete-char"
        },
        {
          "front": "C-k",
          "back": "kill-line"
        },
        {
          "front": "C-u",
          "back": "unix-line-discard"
        },
        {
          "front": "C-w",
          "back": "unix-word-rubout"
        },
        {
          "front": "C-y",
          "back": "yank"
        },
        {
          "front": "M-y",
          "back": "yank-pop"
        },
        {
          "front": "C-_",
          "back": "undo"
        },
        {
          "front": "C-g",
          "back": "abort"
        },
        {
          "front": [
            "!n",
            "!-n",
            "!!",
            "!str",
            "!?str[?]",
            "^str1^str2^"
          ],
          "back": [
            "Refer to command line n",
            "Refer to the current command minus n",
            "!! = !-1",
            "Refer to the most recent command ~ starting with str",
            "Refer to the most recent command ~ containing str",
            "!!:s/str1/str2/"
          ]
        },
        {
          "front": [
            "word Designators & modifires",
            "0",
            "n",
            "^",
            "$",
            "x-y, x-, -y",
            "*",
            "s",
            "g",
            "p"
          ],
          "back": [
            "the zeroth word",
            "the nth word",
            "the first argument (not 0) (: may be omitted)",
            "the last word (: may be omitted)",
            "A range of words",
            "* = 1-$ (: may be omitted)",
            "substitute",
            "like sed g (:gs)",
            ":p print the new command but do not execute it"
          ]
        }
      ]
    },
    {
      "subject": "grep",
      "contents": [
        {
          "front": "ignore-case",
          "back": "-i"
        },
        {
          "front": "invert-match",
          "back": "-v"
        },
        {
          "front": "recursive",
          "back": "-r"
        }
      ]
    },
    {
      "subject": "sed",
      "contents": [
        {
          "front": "addresses",
          "back": [
            "number",
            "!",
            "$",
            "/regexp/",
            "addr1,addr2"
          ]
        },
        {
          "front": "substituting",
          "back": [
            "s/regexp/replacement/",
            "s/^/  /"
          ]
        },
        {
          "front": "printing",
          "back": [
            "p",
            "sed -n '/regexp/p'"
          ]
        },
        {
          "front": "deleting",
          "back": [
            "d",
            "sed '/regexp/d'"
          ]
        }
      ]
    },
    {
      "subject": "Regular Expression",
      "contents": [
        {
          "front": "metacharacter BRE vs ERE",
          "back": [
            "\\{",
            "\\?",
            "\\+",
            "\\|",
            "\\( \\)"
          ]
        },
        {
          "front": "command BRE vs ERE",
          "back": [
            "BRE(grep, sed, vi(almost))",
            "ERE(less, awk)"
          ]
        },
        {
          "front": [
            "*",
            "\\?",
            "\\+"
          ],
          "back": [
            "* = {0,}",
            "\\? = {0, 1}",
            "\\+ = {1,}"
          ]
        },
        {
          "front": "metacharacter BRE vs GLOB",
          "back": [
            ".* = *",
            ". = ?"
          ]
        }
      ]
    }
  ]
}